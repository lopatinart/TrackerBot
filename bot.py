from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from config import BOT_TOKEN
from database import init_db, add_expense, get_expenses_by_period, get_stats_by_period
from kb import main_keyboard, stats_period_keyboard, category_keyboard, skip_cancel, cancel_keyboard, history_period_keyboard
import asyncio
import logging
from pprint import pprint

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–π
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler()
    ]
)


class AddExpense(StatesGroup):
    choosing_category = State()
    entering_amount = State()
    entering_description = State()

class HistoryPeriod(StatesGroup):
    choosing_period = State()

class StatsPeriod(StatesGroup):
    choosing_period = State()

####################################–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç####################################################

@dp.message(CommandStart())
async def start(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ üí∞", reply_markup=main_keyboard)

####################################–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã####################################################

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ß—Ç–æ –∂–µ–ª–∞–µ—à—å —Å–¥–µ–ª–∞—Ç—å? üí∞", reply_markup=main_keyboard)

##################################–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É#####################################################

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É")
async def start_add_expense(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–∞—Ç—É")
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard)
    await state.set_state(AddExpense.choosing_category)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("cat:"))
async def category_entered(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split(":")[1]
    await state.update_data(category=category)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username}/{callback.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")

    await callback.message.delete()
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    bot_msg = await callback.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=cancel_keyboard)

    await state.update_data(sum_msg_id=bot_msg.message_id)
    await state.set_state(AddExpense.entering_amount)
    await callback.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã
@dp.message(AddExpense.entering_amount, F.text)
async def amount_entered(message: Message, state: FSMContext):
    if message.text.isdigit():
        amount = int(message.text)
        await state.update_data(amount=amount)

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –≤–≤–µ–ª —Å—É–º–º—É: {amount}")
        await message.delete()

        data = await state.get_data()
        sum_msg_id = data.get("sum_msg_id")
        if sum_msg_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=sum_msg_id)
            except Exception:
                pass

        await message.answer(f"–°—É–º–º–∞: {amount}")
        des_msg = await message.answer(f"–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç—Ä–∞—Ç–µ? –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=skip_cancel)
        await state.update_data(des_msg_id=des_msg.message_id)

        await state.set_state(AddExpense.entering_description)
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!", reply_markup=cancel_keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(AddExpense.entering_description)
async def description_entered(message: Message, state: FSMContext):
    user_data = await state.get_data()

    if message.text != "üîÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = message.text
        await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")

    else:
        description =  ""
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ")

    await message.delete()
    des_msg_id = user_data.get("des_msg_id")
    if des_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=des_msg_id)
        except Exception:
            pass

    await add_expense(
        user_id=message.from_user.id,
        category=user_data["category"],
        amount=user_data["amount"],
        description=description
    )
    await message.answer("‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard)
    await state.clear()
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Ç—Ä–∞—Ç—É: {user_data['category']} - {user_data['amount']} ‚ÇΩ - {description}")


####################################–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤####################################################

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤"
@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤")
async def start_history(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=history_period_keyboard)
    await state.set_state(HistoryPeriod.choosing_period)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query(F.data.startswith("his:"))
async def history_period_entered(callback: CallbackQuery, state: FSMContext):
    period = callback.data.split(":")[1]
    await state.update_data(period=period)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username}/{callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏: {period}")

    await callback.message.delete()
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {period}\n–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é...")
    user_history_data = await get_expenses_by_period(callback.from_user.id, period)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username}/{callback.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –æ–± –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –ë–î")

    history_message = f"–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç –∑–∞ {period.lower()}:\n"
    for date, expenses in user_history_data.items():
        history_message += f"\n{date}:\n"
        for expense in expenses:
            time = expense[0]
            category, amount, description = expense[1]
            history_message += f"  {time}: {category} - {amount}‚ÇΩ - {description}\n"

    await callback.message.answer(history_message)

####################################–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤####################################################

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def start_stats(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stats_period_keyboard)
    await state.set_state(StatsPeriod.choosing_period)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(F.data.startswith("stat:"))
async def stats_period_entered(callback: CallbackQuery, state: FSMContext):
    period = callback.data.split(":")[1]
    await state.update_data(period=period)

    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username}/{callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {period}")

    await callback.message.delete()
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {period}\n–°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")

    category_totals = await get_stats_by_period(callback.from_user.id, period)
    total_amount = sum(category_totals.values())

    stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period.lower()}:\n\n"
    stats_message += f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_amount}‚ÇΩ\n\n"

    if category_totals:
        stats_message += "–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for category, amount in category_totals.items():
            percentage = (amount / total_amount) * 100 if total_amount > 0 else 0
            stats_message += f"  {category}: {amount}‚ÇΩ ({percentage:.1f}%)\n"
    else:
        stats_message += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    await callback.message.answer(stats_message, reply_markup=main_keyboard)
    await state.clear()
    await callback.answer()

####################################–ü–æ–º–æ—â—å####################################################

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message):
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤</b> üí∞

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É - –≤–Ω–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ç—Ä–∞—Ç—É
üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞—Ç
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º

<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É:</b>
1. –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)
4. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥

<b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:</b>
- –î–µ–Ω—å
- –ù–µ–¥–µ–ª—è
- –ú–µ—Å—è—Ü
- –ì–æ–¥
- –í—Å–µ –≤—Ä–µ–º—è

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.
"""
    await message.answer(help_text, parse_mode="HTML", reply_markup=main_keyboard)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username}/{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
